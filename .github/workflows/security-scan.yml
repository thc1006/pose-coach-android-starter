name: Security Scanning & Vulnerability Assessment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # OWASP Dependency Check
  dependency-security-scan:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'pose-coach-android'
          path: '.'
          format: 'ALL'
          out: 'dependency-check-reports'
          args: >
            --enableRetired
            --enableExperimental
            --suppression dependency-check-suppressions.xml

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-reports
          path: dependency-check-reports/
          retention-days: 30

      - name: Parse vulnerability results
        run: |
          if [ -f "dependency-check-reports/dependency-check-report.json" ]; then
            high_vulns=$(jq '.dependencies[].vulnerabilities[]? | select(.severity == "HIGH") | .name' dependency-check-reports/dependency-check-report.json | wc -l)
            critical_vulns=$(jq '.dependencies[].vulnerabilities[]? | select(.severity == "CRITICAL") | .name' dependency-check-reports/dependency-check-report.json | wc -l)

            echo "Critical vulnerabilities: $critical_vulns"
            echo "High vulnerabilities: $high_vulns"

            if [ "$critical_vulns" -gt 0 ]; then
              echo "‚ùå Critical vulnerabilities found - blocking deployment"
              exit 1
            fi

            if [ "$high_vulns" -gt 5 ]; then
              echo "‚ùå Too many high-severity vulnerabilities ($high_vulns > 5)"
              exit 1
            fi
          fi

  # Trivy vulnerability scanner
  trivy-security-scan:
    name: Trivy Vulnerability Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Secret scanning
  secret-scanning:
    name: Secret Scanning & Credential Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Custom secret patterns check
        run: |
          echo "üîç Scanning for common secret patterns..."

          # API Keys
          if grep -r "api[_-]key\s*=\s*[\"'][a-zA-Z0-9]{20,}" --include="*.kt" --include="*.java" --include="*.xml" --include="*.properties" .; then
            echo "‚ùå Potential API keys found in code"
            exit 1
          fi

          # AWS credentials
          if grep -r "AKIA[0-9A-Z]{16}" --include="*.kt" --include="*.java" --include="*.xml" --include="*.properties" .; then
            echo "‚ùå AWS access keys found in code"
            exit 1
          fi

          # Database passwords
          if grep -r "password\s*=\s*[\"'][^\"']{8,}" --include="*.kt" --include="*.java" --include="*.properties" .; then
            echo "‚ùå Potential passwords found in code"
            exit 1
          fi

          # JWT tokens
          if grep -r "eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*" --include="*.kt" --include="*.java" .; then
            echo "‚ùå JWT tokens found in code"
            exit 1
          fi

          # Google API keys
          if grep -r "AIza[0-9A-Za-z_-]{35}" --include="*.kt" --include="*.java" --include="*.xml" .; then
            echo "‚ùå Google API keys found in code"
            exit 1
          fi

          echo "‚úÖ No secrets detected"

      - name: Check for debug certificates in production
        run: |
          if find . -name "*.keystore" -o -name "*.jks" | grep -v "debug"; then
            echo "‚ùå Production keystores found in repository"
            exit 1
          fi

          echo "‚úÖ No production keystores in repository"

  # Android security analysis
  android-security-analysis:
    name: Android Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build debug APK for analysis
        run: ./gradlew assembleDebug

      - name: Run MobSF static analysis
        uses: fundacaocerti/mobsf-action@v1.7.1
        with:
          input-file-path: app/build/outputs/apk/debug/app-debug.apk
          mobsf-url: https://mobsf.live
          api-key: ${{ secrets.MOBSF_API_KEY }}

      - name: Android manifest security check
        run: |
          manifest="app/src/main/AndroidManifest.xml"

          # Check for exported components without proper protection
          if grep -q 'android:exported="true"' "$manifest" && ! grep -q 'android:permission' "$manifest"; then
            echo "‚ùå Exported components without proper permissions found"
            exit 1
          fi

          # Check for debug flags
          if grep -q 'android:debuggable="true"' "$manifest"; then
            echo "‚ùå Debug flag enabled in manifest"
            exit 1
          fi

          # Check for backup allowance
          if grep -q 'android:allowBackup="true"' "$manifest"; then
            echo "‚ö†Ô∏è Backup allowed - ensure sensitive data is excluded"
          fi

          # Check for clear text traffic
          if grep -q 'android:usesCleartextTraffic="true"' "$manifest"; then
            echo "‚ùå Clear text traffic allowed"
            exit 1
          fi

          echo "‚úÖ Android manifest security checks passed"

      - name: ProGuard/R8 configuration check
        run: |
          proguard_file="app/proguard-rules.pro"

          if [ -f "$proguard_file" ]; then
            # Check for overly permissive rules
            if grep -q "\-dontobfuscate" "$proguard_file"; then
              echo "‚ùå Code obfuscation disabled"
              exit 1
            fi

            if grep -q "\-dontshrink" "$proguard_file"; then
              echo "‚ùå Code shrinking disabled"
              exit 1
            fi

            echo "‚úÖ ProGuard configuration is secure"
          else
            echo "‚ö†Ô∏è No ProGuard configuration found"
          fi

  # Network security analysis
  network-security-analysis:
    name: Network Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Network security configuration check
        run: |
          nsc_file="app/src/main/res/xml/network_security_config.xml"

          if [ -f "$nsc_file" ]; then
            # Check for clear text traffic permissions
            if grep -q "cleartextTrafficPermitted.*true" "$nsc_file"; then
              echo "‚ùå Clear text traffic permitted in network security config"
              exit 1
            fi

            # Check for certificate pinning
            if ! grep -q "pin-set" "$nsc_file"; then
              echo "‚ö†Ô∏è Certificate pinning not configured"
            fi

            echo "‚úÖ Network security configuration is secure"
          else
            echo "‚ö†Ô∏è No network security configuration found"
          fi

      - name: Check for insecure network calls
        run: |
          # Check for HTTP URLs in code
          if grep -r "http://" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ùå Insecure HTTP URLs found in code"
            exit 1
          fi

          # Check for disabled SSL verification
          if grep -r "setHostnameVerifier.*ALLOW_ALL" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ùå SSL hostname verification disabled"
            exit 1
          fi

          if grep -r "trustAllCerts" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ùå SSL certificate validation disabled"
            exit 1
          fi

          echo "‚úÖ Network security checks passed"

  # Data protection analysis
  data-protection-analysis:
    name: Data Protection & Privacy Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for proper data encryption
        run: |
          # Check for encrypted shared preferences
          if ! grep -r "EncryptedSharedPreferences" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ùå Encrypted shared preferences not implemented"
            exit 1
          fi

          # Check for database encryption
          if grep -r "SQLiteDatabase" --include="*.kt" --include="*.java" app/src/ && ! grep -r "sqlcipher" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ö†Ô∏è Database encryption not detected"
          fi

          echo "‚úÖ Data protection checks passed"

      - name: Check for privacy compliance
        run: |
          # Check for permission explanations
          if ! grep -r "shouldShowRequestPermissionRationale" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ùå Permission rationale handling not found"
            exit 1
          fi

          # Check for data collection consent
          if ! grep -r "privacy.*consent\|consent.*privacy" --include="*.kt" --include="*.java" app/src/; then
            echo "‚ùå Privacy consent handling not found"
            exit 1
          fi

          echo "‚úÖ Privacy compliance checks passed"

  # Security scan summary
  security-scan-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [
      dependency-security-scan,
      trivy-security-scan,
      secret-scanning,
      android-security-analysis,
      network-security-analysis,
      data-protection-analysis
    ]
    if: always()

    steps:
      - name: Generate security report
        run: |
          echo "## üîí Security Scan Summary"
          echo "| Component | Status |"
          echo "|-----------|--------|"
          echo "| Dependencies | ${{ needs.dependency-security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Vulnerabilities | ${{ needs.trivy-security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Secrets | ${{ needs.secret-scanning.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Android Security | ${{ needs.android-security-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Network Security | ${{ needs.network-security-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Data Protection | ${{ needs.data-protection-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"

      - name: Notify security team on critical issues
        if: |
          needs.dependency-security-scan.result == 'failure' ||
          needs.secret-scanning.result == 'failure' ||
          needs.android-security-analysis.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            üö® CRITICAL SECURITY ISSUES DETECTED üö®
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}

            Failed Security Checks:
            - Dependencies: ${{ needs.dependency-security-scan.result }}
            - Secrets: ${{ needs.secret-scanning.result }}
            - Android: ${{ needs.android-security-analysis.result }}

            Please review immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Block merge on critical security failures
        if: |
          needs.dependency-security-scan.result == 'failure' ||
          needs.secret-scanning.result == 'failure'
        run: |
          echo "‚ùå Critical security issues detected - blocking merge"
          exit 1