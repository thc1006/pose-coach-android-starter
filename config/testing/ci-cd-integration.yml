# CI/CD Testing Integration Configuration
# Pose Coach Android Testing Pipeline

name: Pose Coach Testing Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Testing Configuration
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true
  ANDROID_HOME: /opt/android-sdk
  ANDROID_SDK_ROOT: /opt/android-sdk

  # Quality Gates
  MIN_COVERAGE_THRESHOLD: 95
  MAX_TEST_EXECUTION_TIME: 300000  # 5 minutes
  MIN_PERFORMANCE_SCORE: 85
  MIN_SECURITY_SCORE: 90
  MIN_AI_ACCURACY: 85

jobs:
  # ==========================================
  # QUALITY GATE: BUILD VALIDATION
  # ==========================================
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant Execute Permission for Gradlew
      run: chmod +x gradlew

    - name: Build Project
      run: ./gradlew build --no-daemon --stacktrace

    - name: Check Build Artifacts
      run: |
        if [ ! -f app/build/outputs/apk/debug/app-debug.apk ]; then
          echo "Build failed: APK not generated"
          exit 1
        fi

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          app/build/outputs/apk/debug/
          app/build/outputs/bundle/release/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: STATIC CODE ANALYSIS
  # ==========================================
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build-validation
    timeout-minutes: 20

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run Lint Analysis
      run: ./gradlew lint --no-daemon

    - name: Run Detekt Code Analysis
      run: ./gradlew detekt --no-daemon

    - name: Run KtLint
      run: ./gradlew ktlintCheck --no-daemon

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=pose-coach-android
          -Dsonar.organization=posecoach
          -Dsonar.sources=app/src/main/
          -Dsonar.tests=app/src/test/,tests/src/
          -Dsonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml
          -Dsonar.android.lint.reportPaths=**/lint-results*.xml

    - name: Upload Static Analysis Results
      uses: actions/upload-artifact@v3
      with:
        name: static-analysis-results
        path: |
          app/build/reports/
          tests/build/reports/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: UNIT TESTING
  # ==========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build-validation
    timeout-minutes: 30

    strategy:
      matrix:
        api-level: [24, 28, 30, 33, 34]
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run Unit Tests
      run: |
        ./gradlew testDebugUnitTest --no-daemon --parallel \
          -Pandroid.testInstrumentationRunnerArguments.class=com.posecoach.testing.AutomatedTestingFramework

    - name: Generate Test Coverage Report
      run: ./gradlew jacocoTestReport --no-daemon

    - name: Validate Coverage Threshold
      run: |
        COVERAGE=$(grep -o 'Total.*[0-9]\+%' app/build/reports/jacoco/test/html/index.html | grep -o '[0-9]\+' | head -1)
        if [ "$COVERAGE" -lt "$MIN_COVERAGE_THRESHOLD" ]; then
          echo "Coverage $COVERAGE% is below threshold $MIN_COVERAGE_THRESHOLD%"
          exit 1
        fi
        echo "Coverage: $COVERAGE%"

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-api-${{ matrix.api-level }}
        path: |
          app/build/reports/tests/
          app/build/test-results/
          app/build/reports/jacoco/
        retention-days: 30

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          app/build/test-results/**/*.xml
          tests/build/test-results/**/*.xml

  # ==========================================
  # QUALITY GATE: INSTRUMENTED TESTING
  # ==========================================
  instrumented-tests:
    name: Instrumented Tests
    runs-on: ubuntu-latest
    needs: build-validation
    timeout-minutes: 45

    strategy:
      matrix:
        device-profile:
          - { api-level: 30, target: google_apis, arch: x86_64, profile: pixel_4 }
          - { api-level: 33, target: google_apis, arch: x86_64, profile: pixel_6 }
        test-suite: [critical, full, performance, security]
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Cache AVD
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.device-profile.api-level }}-${{ matrix.device-profile.arch }}-${{ matrix.device-profile.target }}

    - name: Create AVD and Generate Snapshot
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.device-profile.api-level }}
        target: ${{ matrix.device-profile.target }}
        arch: ${{ matrix.device-profile.arch }}
        profile: ${{ matrix.device-profile.profile }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: echo "Generated AVD snapshot for caching."

    - name: Run Instrumented Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.device-profile.api-level }}
        target: ${{ matrix.device-profile.target }}
        arch: ${{ matrix.device-profile.arch }}
        profile: ${{ matrix.device-profile.profile }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

          # Run tests based on suite type
          case "${{ matrix.test-suite }}" in
            "critical")
              ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.posecoach.testing.AutomatedTestingFramework \
                -Pandroid.testInstrumentationRunnerArguments.testSuite=CRITICAL_PATH --no-daemon
              ;;
            "full")
              ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.posecoach.testing.AutomatedTestingFramework \
                -Pandroid.testInstrumentationRunnerArguments.testSuite=FULL --no-daemon
              ;;
            "performance")
              ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.posecoach.testing.performance.PerformanceTestingAutomation \
                -Pandroid.testInstrumentationRunnerArguments.testSuite=PERFORMANCE_ONLY --no-daemon
              ;;
            "security")
              ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.posecoach.testing.security.SecurityPrivacyTestingSuite \
                -Pandroid.testInstrumentationRunnerArguments.testSuite=SECURITY_ONLY --no-daemon
              ;;
          esac

    - name: Upload Instrumented Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: instrumented-test-results-${{ matrix.device-profile.api-level }}-${{ matrix.test-suite }}
        path: |
          app/build/reports/androidTests/
          app/build/outputs/androidTest-results/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: AI MODEL TESTING
  # ==========================================
  ai-model-testing:
    name: AI Model Testing
    runs-on: ubuntu-latest
    needs: build-validation
    timeout-minutes: 60

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Python for AI Testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install AI Testing Dependencies
      run: |
        pip install tensorflow==2.13.0 numpy opencv-python scikit-learn

    - name: Download Test Datasets
      run: |
        mkdir -p tests/datasets
        # Download pose detection test datasets
        wget -O tests/datasets/pose_validation.zip "https://example.com/pose_validation_dataset.zip"
        unzip tests/datasets/pose_validation.zip -d tests/datasets/

    - name: Run AI Model Tests
      run: |
        ./gradlew testDebugUnitTest --tests "*AIModelTestingInfrastructure*" --no-daemon

    - name: Validate AI Model Accuracy
      run: |
        # Extract accuracy from test results
        ACCURACY=$(grep -r "pose_detection_accuracy" app/build/test-results/ | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        if (( $(echo "$ACCURACY < $MIN_AI_ACCURACY" | bc -l) )); then
          echo "AI Model accuracy $ACCURACY% is below threshold $MIN_AI_ACCURACY%"
          exit 1
        fi
        echo "AI Model Accuracy: $ACCURACY%"

    - name: Upload AI Test Results
      uses: actions/upload-artifact@v3
      with:
        name: ai-model-test-results
        path: |
          app/build/reports/ai-tests/
          tests/datasets/results/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: PERFORMANCE TESTING
  # ==========================================
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [unit-tests, instrumented-tests]
    timeout-minutes: 45

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Run Performance Benchmarks
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: pixel_4
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        disable-animations: true
        script: |
          ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=androidx.benchmark.junit4.AndroidBenchmarkRunner \
            --tests "*PerformanceTestingAutomation*" --no-daemon

    - name: Validate Performance Metrics
      run: |
        # Extract performance score from benchmark results
        PERF_SCORE=$(grep -r "performance_score" app/build/outputs/androidTest-results/ | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        if (( $(echo "$PERF_SCORE < $MIN_PERFORMANCE_SCORE" | bc -l) )); then
          echo "Performance score $PERF_SCORE% is below threshold $MIN_PERFORMANCE_SCORE%"
          exit 1
        fi
        echo "Performance Score: $PERF_SCORE%"

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          app/build/outputs/connected_android_test_additional_output/
          app/build/reports/benchmark/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: SECURITY TESTING
  # ==========================================
  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: build-validation
    timeout-minutes: 30

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Run Security Tests
      run: |
        ./gradlew testDebugUnitTest --tests "*SecurityPrivacyTestingSuite*" --no-daemon

    - name: OWASP Dependency Check
      run: |
        ./gradlew dependencyCheckAnalyze --no-daemon

    - name: Mobile Security Framework (MobSF) Scan
      run: |
        docker run -i --rm -v $(pwd):/src opensecurity/mobsf:latest \
          python manage.py mobsf_ci --file /src/app/build/outputs/apk/debug/app-debug.apk

    - name: Validate Security Score
      run: |
        # Extract security score from test results
        SEC_SCORE=$(grep -r "security_score" app/build/test-results/ | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        if (( $(echo "$SEC_SCORE < $MIN_SECURITY_SCORE" | bc -l) )); then
          echo "Security score $SEC_SCORE% is below threshold $MIN_SECURITY_SCORE%"
          exit 1
        fi
        echo "Security Score: $SEC_SCORE%"

    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results
        path: |
          app/build/reports/security/
          app/build/reports/dependency-check/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: INTEGRATION TESTING
  # ==========================================
  integration-testing:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [unit-tests, instrumented-tests]
    timeout-minutes: 60

    strategy:
      matrix:
        test-scenario: [e2e, multimodal, device-compatibility]
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Run Integration Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: pixel_4
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back virtualscene
        disable-animations: true
        script: |
          case "${{ matrix.test-scenario }}" in
            "e2e")
              ./gradlew connectedDebugAndroidTest --tests "*IntegrationTestingFramework*e2e*" --no-daemon
              ;;
            "multimodal")
              ./gradlew connectedDebugAndroidTest --tests "*IntegrationTestingFramework*multimodal*" --no-daemon
              ;;
            "device-compatibility")
              ./gradlew connectedDebugAndroidTest --tests "*IntegrationTestingFramework*compatibility*" --no-daemon
              ;;
          esac

    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results-${{ matrix.test-scenario }}
        path: |
          app/build/reports/androidTests/
          app/build/outputs/androidTest-results/
        retention-days: 30

  # ==========================================
  # QUALITY GATE: COMPREHENSIVE REPORTING
  # ==========================================
  quality-reporting:
    name: Quality Metrics Reporting
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests, instrumented-tests, ai-model-testing, performance-testing, security-testing, integration-testing]
    if: always()
    timeout-minutes: 15

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Download All Test Artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-results/

    - name: Generate Comprehensive Quality Report
      run: |
        ./gradlew generateQualityReport --no-daemon \
          -PtestResultsPath=test-results/ \
          -PreportFormat=HTML,JSON \
          -PincludeDetailedMetrics=true

    - name: Calculate Overall Quality Score
      id: quality-score
      run: |
        # Aggregate all quality metrics
        OVERALL_SCORE=$(python3 scripts/calculate-quality-score.py test-results/)
        echo "overall-score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
        echo "Overall Quality Score: $OVERALL_SCORE%"

    - name: Quality Gate Decision
      run: |
        SCORE=${{ steps.quality-score.outputs.overall-score }}
        if (( $(echo "$SCORE < 85" | bc -l) )); then
          echo "Overall quality score $SCORE% is below threshold 85%"
          echo "Quality gate FAILED - blocking deployment"
          exit 1
        fi
        echo "Quality gate PASSED - deployment approved"

    - name: Upload Comprehensive Report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-quality-report
        path: |
          app/build/reports/quality/
          test-results/
        retention-days: 90

    - name: Publish Quality Dashboard
      run: |
        # Deploy quality dashboard to GitHub Pages or internal system
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ./scripts/deploy-quality-dashboard.sh app/build/reports/quality/dashboard/
        fi

    - name: Comment PR with Quality Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const qualityScore = "${{ steps.quality-score.outputs.overall-score }}";
          const reportUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;

          const comment = `## 🧪 Quality Report

          **Overall Quality Score: ${qualityScore}%**

          | Metric | Status | Score |
          |--------|--------|-------|
          | Test Coverage | ✅ | 95%+ |
          | Performance | ✅ | 85%+ |
          | Security | ✅ | 90%+ |
          | AI Model Accuracy | ✅ | 85%+ |

          [View detailed report](${reportUrl})
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ==========================================
  # DEPLOYMENT GATE
  # ==========================================
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: quality-reporting
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    environment:
      name: production
      url: https://play.google.com/store/apps/details?id=com.posecoach.camera

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Build Release APK
      run: |
        ./gradlew assembleRelease --no-daemon

    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: Deploy to Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.posecoach.camera
        releaseFiles: app/build/outputs/apk/release/app-release-signed.apk
        track: internal
        status: completed
        whatsNewDirectory: release-notes/

    - name: Notify Deployment Success
      run: |
        echo "🚀 Deployment successful to Play Store Internal Track"
        echo "Quality gates passed - release deployed"

  # ==========================================
  # CONTINUOUS MONITORING
  # ==========================================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deployment-gate
    if: success()
    timeout-minutes: 30

    steps:
    - name: Setup Monitoring
      run: |
        # Setup post-deployment quality monitoring
        echo "Initiating post-deployment monitoring..."

    - name: Performance Monitoring
      run: |
        # Monitor app performance in production
        curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{"type": "deployment", "status": "success", "version": "${{ github.sha }}"}'

    - name: Quality Metrics Tracking
      run: |
        # Track quality metrics in production
        echo "Quality metrics tracking initiated for build ${{ github.sha }}"

# ==========================================
# NOTIFICATION CONFIGURATION
# ==========================================
on_failure:
  runs-on: ubuntu-latest
  if: failure()
  steps:
    - name: Notify Quality Gate Failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 Quality Gate Failed for Pose Coach Android

          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}

          Please check the failed quality gates and fix issues before proceeding.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}